import { createClient } from '@supabase/supabase-js';
import { SiteContent } from '../types/content';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
const adminSecret = import.meta.env.VITE_ADMIN_SECRET;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Supabase environment variables not found');
}

export const supabase = createClient(supabaseUrl || '', supabaseAnonKey || '');

export const saveContentToDatabase = async (content: SiteContent): Promise<boolean> => {
  try {
    console.log('üîÑ –ü–û–ü–´–¢–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î...');
    
    // Check if Supabase URL is available
    if (!supabaseUrl) {
      console.error('‚ùå SUPABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return false;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Edge Function –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
    const response = await fetch(`${supabaseUrl}/functions/v1/save-content`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${supabaseAnonKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        content: content,
        adminSecret: adminSecret || 'podmotka1122_admin_secret'
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î:', errorText);
      return false;
    }

    const result = await response.json();
    if (result.success) {
      console.log('‚úÖ –ö–û–ù–¢–ï–ù–¢ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù –í –ë–ê–ó–£ –î–ê–ù–ù–´–•!');
    } else {
      console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î:', result.error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î:', error);
    return false;
  }
};

export const loadContentFromDatabase = async (): Promise<SiteContent | null> => {
  try {
    console.log('üîÑ –ó–ê–ì–†–£–ó–ö–ê –ò–ó –ë–î...');
    
    const { data, error, count } = await supabase
      .from('site_content')
      .select('content')
      .eq('id', 'main');

    if (error) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∑–∞–ø–∏—Å–µ–π, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
      if (error.code !== 'PGRST116') {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ë–î:', error.message);
        throw new Error(error.message);
      }
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç (PGRST116), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      console.log('‚ÑπÔ∏è –ó–∞–ø–∏—Å–µ–π –≤ –ë–î –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if (!data || data.length === 0 || !data[0]?.content) {
      console.log('‚úÖ –ö–û–ù–¢–ï–ù–¢ –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù –ò–ó –ë–î');
      return data.content as SiteContent;
    }

    console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î');
    return data[0].content as SiteContent;
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ë–î:', error);
    return null;
  }
};